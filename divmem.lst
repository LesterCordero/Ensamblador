     1                                 %line 1+1 divmem.asm
     2                                 [section .bss]
     3 00000000 <gap>                  cociente resq 1
     4 00000008 <gap>                  residuo resq 1
     5 00000010 <gap>                  result1 resq 5
     6 00000038 <gap>                  result2 resq 5
     7                                 
     8                                 [section .data]
     9 00000000 E803000000000000       dividendo dq 1000
    10 00000008 4300000000000000       divisor dq 67
    11 00000010 BBDD00000000000064-    dat1 dq 56763, 100, -100, 100, -100
    12 00000010 000000000000009CFF-
    13 00000010 FFFFFFFFFFFF640000-
    14 00000010 00000000009CFFFFFF-
    15 00000010 FFFFFFFF           
    16 00000038 5A0100000000000012-    dat2 dq 346, 18, 18, -18, -18
    17 00000038 000000000000001200-
    18 00000038 000000000000EEFFFF-
    19 00000038 FFFFFFFFFFEEFFFFFF-
    20 00000038 FFFFFFFF           
    21                                 
    22 00000060 416C20646976696469-    linea db "Al dividir %8ld entre %8ld produce cociente =%5ld,  y residuo =%5ld",10,0
    23 00000060 722025386C6420656E-
    24 00000060 7472652025386C6420-
    25 00000060 70726F647563652063-
    26 00000060 6F6369656E7465203D-
    27 00000060 25356C642C20207920-
    28 00000060 7265736964756F203D-
    29 00000060 25356C640A00       
    30 000000A5 4572726F722C207265-    errmsg db "Error, registro modificado",10,0
    31 000000A5 67697374726F206D6F-
    32 000000A5 646966696361646F0A-
    33 000000A5 00                 
    34                                 
    35                                 %line 70+1 divmem.asm
    36                                 
    37                                 [global main]
    38                                 [extern printf]
    39                                 [section .text]
    40                                 main:
    41                                 
    42                                 %line 75+0 divmem.asm
    43 00000000 50                      push rax
    44 00000001 52                      push rdx
    45 00000002 4150                    push r8
    46 00000004 4151                    push r9
    47                                 
    48 00000006 49C7C000000000          mov r8, 0
    49 0000000D 49C7C100000000          mov r9, 0
    50                                 
    51                                 
    52                                 
    53 00000014 48833C25[00000000]-     cmp qword[dividendo], 0
    54 00000014 00                 
    55 0000001D 7C0D                    jl ..@5.dividendoNegativo
    56 0000001F EB21                    jmp ..@5.continue1
    57                                 
    58 00000021 48833C25[00000000]-     cmp qword[divisor], 0
    59 00000021 00                 
    60 0000002A 7C0F                    jl ..@5.divisorNegativo
    61 0000002C EB14                    jmp ..@5.continue1
    62                                 
    63                                 ..@5.dividendoNegativo:
    64                                 
    65 0000002E 49C7C001000000          mov r8, 1
    66 00000035 48F71C25[00000000]      neg qword[dividendo]
    67                                 
    68                                 ..@5.divisorNegativo:
    69                                 
    70 0000003D 49C7C101000000          mov r9, 1
    71                                 
    72                                 ..@5.continue1:
    73                                 
    74 00000044 488B0425[00000000]      mov rax, [dividendo]
    75 0000004C 99                      cdq
    76 0000004D 48F73C25[00000000]      idiv qword [divisor]
    77 00000055 48890425[00000000]      mov [cociente], rax
    78 0000005D 48891425[00000000]      mov [residuo], rdx
    79                                 
    80                                 
    81 00000065 4983F801                cmp r8, 1
    82 00000069 751C                    jne ..@5.continue2
    83 0000006B 48F71C25[00000000]      neg qword[dividendo]
    84 00000073 48F71C25[00000000]      neg qword[residuo]
    85 0000007B 4983F901                cmp r9, 1
    86 0000007F 7506                    jne ..@5.continue2
    87 00000081 48F71C25[00000000]      neg qword[cociente]
    88                                 
    89                                 ..@5.continue2:
    90                                 
    91 00000089 4159                    pop r9
    92 0000008B 4158                    pop r8
    93 0000008D 5A                      pop rdx
    94 0000008E 58                      pop rax
    95                                 
    96                                 %line 76+1 divmem.asm
    97 0000008F 48C7C000000000          mov rax, 0
    98 00000096 48C7C7[00000000]        mov rdi, linea
    99 0000009D 488B3425[00000000]      mov rsi, [dividendo]
   100 000000A5 488B1425[00000000]      mov rdx, [divisor]
   101 000000AD 488B0C25[00000000]      mov rcx, [cociente]
   102 000000B5 4C8B0425[00000000]      mov r8, [residuo]
   103 000000BD E8(F6FFFFFF)            call printf
   104                                 
   105 000000C2 48C7C0FFFFFFFF          mov rax, -1
   106 000000C9 48C7C3FEFFFFFF          mov rbx, -2
   107 000000D0 48C7C2FDFFFFFF          mov rdx, -3
   108 000000D7 48C7C6FCFFFFFF          mov rsi, -4
   109 000000DE 48C7C7FBFFFFFF          mov rdi, -5
   110 000000E5 49C7C0FAFFFFFF          mov r8, -6
   111 000000EC 49C7C1F9FFFFFF          mov r9, -7
   112 000000F3 49C7C2F8FFFFFF          mov r10, -8
   113 000000FA 49C7C3F7FFFFFF          mov r11, -9
   114 00000101 49C7C5F6FFFFFF          mov r13, -10
   115 00000108 49C7C6F5FFFFFF          mov r14, -11
   116 0000010F 49C7C7F4FFFFFF          mov r15, -12
   117                                 
   118 00000116 48C7C105000000          mov rcx, 5
   119 0000011D 4D31E4                  xor r12, r12
   120                                 
   121                                 again:
   122                                 
   123                                 %line 101+0 divmem.asm
   124 00000120 50                      push rax
   125 00000121 52                      push rdx
   126 00000122 4150                    push r8
   127 00000124 4151                    push r9
   128                                 
   129 00000126 49C7C000000000          mov r8, 0
   130 0000012D 49C7C100000000          mov r9, 0
   131                                 
   132                                 
   133                                 
   134 00000134 4A833CE5[00000000]-     cmp qword[dat1+r12*8], 0
   135 00000134 00                 
   136 0000013D 7C0D                    jl ..@6.dividendoNegativo
   137 0000013F EB21                    jmp ..@6.continue1
   138                                 
   139 00000141 4A833CE5[00000000]-     cmp qword[dat2+r12*8], 0
   140 00000141 00                 
   141 0000014A 7C0F                    jl ..@6.divisorNegativo
   142 0000014C EB14                    jmp ..@6.continue1
   143                                 
   144                                 ..@6.dividendoNegativo:
   145                                 
   146 0000014E 49C7C001000000          mov r8, 1
   147 00000155 4AF71CE5[00000000]      neg qword[dat1+r12*8]
   148                                 
   149                                 ..@6.divisorNegativo:
   150                                 
   151 0000015D 49C7C101000000          mov r9, 1
   152                                 
   153                                 ..@6.continue1:
   154                                 
   155 00000164 4A8B04E5[00000000]      mov rax, [dat1+r12*8]
   156 0000016C 99                      cdq
   157 0000016D 4AF73CE5[00000000]      idiv qword [dat2+r12*8]
   158 00000175 4A8904E5[00000000]      mov [result1+r12*8], rax
   159 0000017D 4A8914E5[00000000]      mov [result2+r12*8], rdx
   160                                 
   161                                 
   162 00000185 4983F801                cmp r8, 1
   163 00000189 751C                    jne ..@6.continue2
   164 0000018B 4AF71CE5[00000000]      neg qword[dat1+r12*8]
   165 00000193 4AF71CE5[00000000]      neg qword[result2+r12*8]
   166 0000019B 4983F901                cmp r9, 1
   167 0000019F 7506                    jne ..@6.continue2
   168 000001A1 4AF71CE5[00000000]      neg qword[result1+r12*8]
   169                                 
   170                                 ..@6.continue2:
   171                                 
   172 000001A9 4159                    pop r9
   173 000001AB 4158                    pop r8
   174 000001AD 5A                      pop rdx
   175 000001AE 58                      pop rax
   176                                 
   177                                 %line 102+1 divmem.asm
   178 000001AF 4883F8FF                cmp rax, -1
   179 000001B3 0F85F1000000            jne abort
   180 000001B9 4883FBFE                cmp rbx, -2
   181 000001BD 0F85E7000000            jne abort
   182 000001C3 4883FAFD                cmp rdx, -3
   183 000001C7 0F85DD000000            jne abort
   184 000001CD 4883FEFC                cmp rsi, -4
   185 000001D1 0F85D3000000            jne abort
   186 000001D7 4883FFFB                cmp rdi, -5
   187 000001DB 0F85C9000000            jne abort
   188 000001E1 4983F8FA                cmp r8, -6
   189 000001E5 0F85BF000000            jne abort
   190 000001EB 4983F9F9                cmp r9, -7
   191 000001EF 0F85B5000000            jne abort
   192 000001F5 4983FAF8                cmp r10, -8
   193 000001F9 0F85AB000000            jne abort
   194 000001FF 4983FBF7                cmp r11, -9
   195 00000203 0F85A1000000            jne abort
   196 00000209 4983FDF6                cmp r13, -10
   197 0000020D 0F8597000000            jne abort
   198 00000213 4983FEF5                cmp r14, -11
   199 00000217 0F858D000000            jne abort
   200 0000021D 4983FFF4                cmp r15, -12
   201 00000221 0F8583000000            jne abort
   202 00000227 48C7C000000000          mov rax, 0
   203 0000022E 48C7C7[00000000]        mov rdi, linea
   204 00000235 4A8B34E5[00000000]      mov rsi, [dat1+r12*8]
   205 0000023D 4A8B14E5[00000000]      mov rdx, [dat2+r12*8]
   206 00000245 51                      push rcx
   207 00000246 4A8B0CE5[00000000]      mov rcx, [result1+r12*8]
   208 0000024E 4E8B04E5[00000000]      mov r8, [result2+r12*8]
   209 00000256 E8(F6FFFFFF)            call printf
   210                                 
   211 0000025B 59                      pop rcx
   212 0000025C 48C7C0FFFFFFFF          mov rax, -1
   213 00000263 48C7C7FBFFFFFF          mov rdi, -5
   214 0000026A 48C7C6FCFFFFFF          mov rsi, -4
   215 00000271 48C7C2FDFFFFFF          mov rdx, -3
   216 00000278 49C7C0FAFFFFFF          mov r8, -6
   217 0000027F 49C7C1F9FFFFFF          mov r9, -7
   218 00000286 49C7C2F8FFFFFF          mov r10, -8
   219 0000028D 49C7C3F7FFFFFF          mov r11, -9
   220 00000294 49FFC4                  inc r12
   221                                 
   222                                 
   223                                 
   224                                 
   225                                 
   226                                 
   227                                 
   228                                 
   229                                 
   230                                 
   231                                 
   232 00000297 E200                   salto: loop next
   233 00000299 EB03                    jmp last
   234 0000029B E97BFEFFFF             next: jmp again
   235                                 
   236                                 last:
   237 000002A0 48C7C03C000000          mov rax, 60
   238 000002A7 48C7C700000000          mov rdi, 0
   239 000002AE 0F05                    syscall
   240                                 
   241 000002B0 48C7C000000000         abort: mov rax, 0
   242 000002B7 48C7C7[00000000]        mov rdi, errmsg
   243 000002BE E8(F6FFFFFF)            call printf
   244 000002C3 48C7C03C000000          mov rax, 60
   245 000002CA 48C7C701000000          mov rdi, 1
   246 000002D1 0F05                    syscall
